1. Define Hashing and Collision Resolution
Hashing is the process of converting a given key (e.g., a string or number) into a fixed-size value, typically a numeric index, that represents where the key should be stored in a hash table. This is achieved through the use of a hash function.

Collision Resolution refers to the strategies employed to handle situations where two or more keys hash to the same index, resulting in a "collision." Efficient collision resolution is crucial to ensure that the hash table remains effective and that all keys are accessible.

2. What is a Hash Table and Why is Collision Resolution Necessary?
A hash table is a data structure that stores key-value pairs and allows for efficient retrieval, insertion, and deletion of values. It uses a hash function to map keys to specific indices in an underlying array.

Collision resolution is necessary because multiple keys might hash to the same index (collision). Without proper collision resolution, some keys may be lost or become inaccessible, resulting in inefficient or incorrect operations.

3. Key Differences between Open Hashing (Chaining) and Closed Hashing (Open Addressing)
Open Hashing (Chaining):

Each slot in the hash table contains a linked list (or another collection type) to handle multiple keys that hash to the same index.
This method dynamically handles collisions without the need for rehashing unless memory is exhausted.
The table may not be fully utilized, as some slots may remain empty.
Closed Hashing (Open Addressing):

When a collision occurs, the algorithm searches for another available slot within the table itself, using a probing mechanism.
All elements must fit within the fixed-size table, necessitating table resizing if the load factor becomes too high.
4. Collision Resolution Techniques
Linear Probing: If a collision occurs, the algorithm checks the next slot (index + 1) and continues checking until an empty slot is found.

Quadratic Probing: This method uses a quadratic function to probe for the next available slot. If a collision occurs at index , it probes at , , and so on.

Double Hashing: This technique employs two hash functions. If a collision occurs, the second hash function calculates a new index.

5. Pros and Cons of Each Method
Linear Probing:

Pros: Simple to implement and generally faster than quadratic probing.
Cons: Tends to cause clustering (consecutive slots being filled), leading to poor performance.
Quadratic Probing:

Pros: Reduces clustering issues seen in linear probing.
Cons: Can result in secondary clustering and may not find an open slot if the table is nearly full.
Double Hashing:

Pros: Minimizes clustering and provides better distribution of keys.
Cons: Requires two hash functions, which can be complex to manage and may slow down performance.
6. Which Collision Resolution Technique Can Handle More Values than Table Slots? Explain.
Open Hashing (Chaining) can handle more values than table slots because each slot in the hash table can hold multiple entries (in a linked list or another structure). This makes it flexible and capable of handling an arbitrary number of keys.

7. What is the Worst Performance (Big O) for Each Type of Collision Resolution Technique?
Open Hashing (Chaining):

Worst case performance: , where  is the number of elements stored in the hash table. This occurs if all keys hash to the same slot and form a single linked list.
Closed Hashing (Open Addressing):

Worst case performance: , where  is the number of elements in the table. This occurs when the table is full or nearly full, and probing takes a long time to find an open slot.
8. How Does the Choice of Table Size Affect the Distribution of Keys?
The table size directly affects the distribution of keys because it determines the number of possible indices. A prime number size often leads to better uniformity in the hash table and reduces clustering.

9. What are the Pitfalls of Using a Poor Table Size (e.g., a Round Number or a Power of 2)?
Using a round number or a power of 2 for the table size can lead to poor distribution of keys. This happens because the hash function may produce patterns that don't spread keys evenly across the table. As a result, certain indices may become overloaded while others remain empty, reducing the efficiency of the hash table.





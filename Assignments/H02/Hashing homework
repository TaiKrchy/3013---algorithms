####1. Define Hashing and Collision Resolution
Hashing is the process of converting a given key (e.g., a string or number) into a fixed-size value, typically a numeric index, that represents where the key should be stored in a hash table. This is done using a hash function.

Collision Resolution refers to the strategies used to handle the situation where two or more keys hash to the same index, causing a "collision." Efficient collision resolution is important to ensure the performance of the hash table remains optimal.

####2. What is a hash table and why is collision resolution necessary?
A hash table is a data structure that stores key-value pairs and allows for efficient retrieval, insertion, and deletion of values. It uses a hash function to map the keys to specific indices in an underlying array.

Collision resolution is necessary because two keys might hash to the same index (collision). Without proper collision resolution, some keys may be lost or not accessible, resulting in inefficient or incorrect operations.

####3. Key differences between open hashing (chaining) and closed hashing (open addressing).
Open Hashing (Chaining):

In open hashing, each slot of the hash table contains a linked list (or another collection type) to handle multiple keys that hash to the same index.

This allows for dynamic handling of collisions, and thereâ€™s no need for rehashing unless memory is exhausted.

The table may not be fully utilized (some slots may remain empty).

Closed Hashing (Open Addressing):

In closed hashing, when a collision occurs, the algorithm searches for another available slot within the table itself, using a probing mechanism.

All elements must fit within the fixed-size table, meaning table resizing may be needed if the load factor becomes too high.

####4. Collision Resolution Techniques
Linear Probing: In this technique, if a collision occurs, the algorithm checks the next slot (index + 1) and continues checking until an empty slot is found.

Quadratic Probing: This method uses a quadratic function to probe for the next available slot. If a collision occurs at index i, it probes at i + 1^2, i + 2^2, and so on.

Double Hashing: This technique uses two hash functions. If a collision occurs, it uses the second hash function to calculate a new index.

####5. Explain the pros and cons of each method.
Linear Probing:

Pros: Simple to implement and generally faster than quadratic probing.

Cons: Tends to cause clustering (consecutive slots being filled), leading to poor performance.

Quadratic Probing:

Pros: Reduces clustering issues seen in linear probing.

Cons: Can result in secondary clustering and may not find an open slot if the table is near full.

Double Hashing:

Pros: Minimizes clustering and provides a better distribution of keys.

Cons: Requires two hash functions, which can be complex to manage and can slow down the performance.

####6. Which collision resolution technique can handle more values than table slots? Explain.
Open Hashing (Chaining) can handle more values than table slots because, unlike closed hashing, each slot in the hash table can hold multiple entries (in a linked list or another structure). This makes it possible to store more entries than the number of slots in the table, as long as memory is available.

####7. What is the worst performance (big O) for each type of collision resolution technique?
Open Hashing (Chaining):

Worst case performance: O(n), where n is the number of elements stored in the hash table, occurs if all keys hash to the same slot and form a single linked list.

Closed Hashing (Open Addressing):

Worst case performance: O(n), where n is the number of elements in the table, occurs when the table is full or nearly full, and probing takes a long time to find an open slot.

####8. How does the choice of table size affect the distribution of keys?
The table size directly affects the distribution of keys because it determines the number of possible indices. A prime number size often leads to better uniformity in the hash table and reduces clustering. A poorly chosen size (e.g., a power of 2) might lead to poor key distribution and increased collisions due to patterns in the hash function.

####9. What are the pitfalls of using a poor table size (for example, a table size that is a round number or a power of 2)?
Using a round number or a power of 2 for the table size can lead to poor distribution of keys. This happens because the hash function may have patterns that don't spread keys evenly across the table. For example, when using modulo for hashing, choosing a table size that is a power of 2 can result in many keys hashing to the same index.


